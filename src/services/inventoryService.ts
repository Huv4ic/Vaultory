import { supabase } from '../integrations/supabase/client';
import { InventoryItem } from '../hooks/useInventory';

export interface DatabaseInventoryItem {
  id: string;
  item_name: string;
  item_price: number;
  item_rarity: string;
  item_type?: string;
  case_id?: string;
  case_name?: string;
  item_image?: string;
  item_image_url?: string;
  status: 'new' | 'sold' | 'withdrawn';
  obtained_at: string;
  sold_at?: string;
  withdrawn_at?: string;
}

export class InventoryService {
  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async getUserInventory(telegramId: number): Promise<DatabaseInventoryItem[]> {
    try {
      const { data, error } = await supabase
        .from('user_inventory')
        .select('*')
        .eq('telegram_id', telegramId)
        .eq('status', 'new')
        .order('obtained_at', { ascending: false });

      if (error) {
        console.error('Error fetching user inventory:', error);
        throw error;
      }

      // –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø—ã –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
      return (data || []).map(item => ({
        ...item,
        status: item.status as 'new' | 'sold' | 'withdrawn'
      }));
    } catch (error) {
      console.error('Failed to fetch user inventory:', error);
      return [];
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
  static async addItemToInventory(
    telegramId: number,
    item: InventoryItem
  ): Promise<string | null> {
    try {
      console.log('üîç InventoryService.addItemToInventory –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', {
        telegramId,
        item: {
          name: item.name,
          price: item.price,
          rarity: item.rarity,
          type: item.type,
          caseId: item.caseId,
          case_name: item.case_name,
          image: item.image,
          image_url: item.image_url
        }
      });

      const insertData = {
        telegram_id: telegramId,
        item_name: item.name,
        item_price: item.price,
        item_rarity: item.rarity,
        item_type: item.type,
        case_id: item.caseId,
        case_name: item.case_name,
        item_image: item.image,
        item_image_url: item.image_url,
        status: 'new',
        obtained_at: new Date().toISOString()
      };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î:', insertData);

      const { data, error } = await supabase
        .from('user_inventory')
        .insert(insertData)
        .select('id')
        .single();

      if (error) {
        console.error('‚ùå Error adding item to inventory:', error);
        throw error;
      }

      console.log('‚úÖ –ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î —Å ID:', data?.id);
      return data?.id || null;
    } catch (error) {
      console.error('‚ùå Failed to add item to inventory:', error);
      return null;
    }
  }

  // –ü—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
  static async sellItem(
    itemId: string,
    telegramId: number
  ): Promise<number> {
    try {
      console.log('üîÑ –ü—Ä–æ–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç:', { itemId, telegramId });
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–∞
      const { data: itemData, error: fetchError } = await supabase
        .from('user_inventory')
        .select('*')
        .eq('id', itemId)
        .eq('telegram_id', telegramId)
        .eq('status', 'new')
        .single();

      if (fetchError || !itemData) {
        console.error('‚ùå Error fetching item for sale:', fetchError);
        console.error('üîç Item data:', itemData);
        return 0;
      }

      console.log('‚úÖ –ü—Ä–µ–¥–º–µ—Ç –Ω–∞–π–¥–µ–Ω:', itemData);
      const itemPrice = itemData.item_price;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ 'sold'
      const { error: updateError } = await supabase
        .from('user_inventory')
        .update({ 
          status: 'sold', 
          sold_at: new Date().toISOString() 
        })
        .eq('id', itemId)
        .eq('telegram_id', telegramId);

      if (updateError) {
        console.error('‚ùå Error updating item status:', updateError);
        throw updateError;
      }

      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–º–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "sold"');

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
      const { data: currentProfile, error: fetchBalanceError } = await supabase
        .from('profiles')
        .select('balance')
        .eq('telegram_id', telegramId)
        .single();

      if (fetchBalanceError || !currentProfile) {
        console.error('‚ùå Error fetching current balance:', fetchBalanceError);
        console.log('üí∞ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–µ–Ω—É –ø—Ä–µ–¥–º–µ—Ç–∞ –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', itemPrice);
        return itemPrice;
      }

      const newBalance = (currentProfile.balance || 0) + itemPrice;
      console.log('üí∞ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å:', { old: currentProfile.balance, new: newBalance });

      const { error: balanceError } = await supabase
        .from('profiles')
        .update({ 
          balance: newBalance 
        })
        .eq('telegram_id', telegramId);

      if (balanceError) {
        console.error('‚ùå Error updating balance:', balanceError);
        // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –ø—Ä–æ–¥–∞–Ω
      } else {
        console.log('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
      }

      console.log('üéâ –ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω –∑–∞:', itemPrice);
      return itemPrice;
    } catch (error) {
      console.error('‚ùå Failed to sell item:', error);
      return 0;
    }
  }

  // –í—ã–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç
  static async withdrawItem(
    itemId: string,
    telegramId: number
  ): Promise<boolean> {
    try {
      console.log('üîÑ –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥–º–µ—Ç:', { itemId, telegramId });
      
      const { error } = await supabase
        .from('user_inventory')
        .update({ 
          status: 'withdrawn', 
          withdrawn_at: new Date().toISOString() 
        })
        .eq('id', itemId)
        .eq('telegram_id', telegramId)
        .eq('status', 'new');

      if (error) {
        console.error('‚ùå Error withdrawing item:', error);
        throw error;
      }

      console.log('‚úÖ –ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω');
      return true;
    } catch (error) {
      console.error('‚ùå Failed to withdraw item:', error);
      return false;
    }
  }

  // –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π localStorage –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  static async migrateLocalStorageToDatabase(telegramId: number): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
      const localInventory = localStorage.getItem('vaultory_inventory');
      if (!localInventory) return;

      const items: InventoryItem[] = JSON.parse(localInventory);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
      const activeItems = items.filter(item => 
        item.status && item.status !== 'sold' && item.status !== 'withdrawn'
      );

      if (activeItems.length === 0) return;

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      for (const item of activeItems) {
        await this.addItemToInventory(telegramId, item);
      }
      
      console.log(`Migrated ${activeItems.length} items from localStorage to database`);
      
      // –û—á–∏—â–∞–µ–º localStorage –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
      localStorage.removeItem('vaultory_inventory');
    } catch (error) {
      console.error('Failed to migrate localStorage to database:', error);
    }
  }
}
