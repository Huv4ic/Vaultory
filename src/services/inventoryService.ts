import { supabase } from '../integrations/supabase/client';
import { InventoryItem } from '../hooks/useInventory';
import { refreshAchievements } from '../utils/achievementUtils';

export interface DatabaseInventoryItem {
  id: string;
  item_name: string;
  item_price: number;
  item_rarity: string;
  item_type?: string;
  case_id?: string;
  case_name?: string;
  item_image?: string;
  item_image_url?: string;
  status: 'new' | 'sold' | 'withdrawn';
  withdrawal_status: 'available' | 'withdrawal_requested' | 'withdrawn' | 'withdrawal_rejected';
  obtained_at: string;
  sold_at?: string;
  withdrawn_at?: string;
}

export class InventoryService {
  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã)
  static async getUserInventory(telegramId: number): Promise<DatabaseInventoryItem[]> {
    try {
      console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramId);
      
      const { data, error } = await supabase
        .from('user_inventory')
        .select('*')
        .eq('telegram_id', telegramId)
        .eq('status', 'new')
        .in('withdrawal_status', ['available', 'withdrawal_rejected']) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        .order('obtained_at', { ascending: false });

      if (error) {
        console.error('Error fetching user inventory:', error);
        throw error;
      }

      console.log('‚úÖ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–µ–¥–º–µ—Ç–æ–≤:', (data || []).length);
      console.log('üìã –§–∏–ª—å—Ç—Ä: status=new, withdrawal_status IN (available, withdrawal_rejected)');

      // –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø—ã –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
      return (data || []).map(item => ({
        ...item,
        status: item.status as 'new' | 'sold' | 'withdrawn',
        withdrawal_status: item.withdrawal_status as 'available' | 'withdrawal_requested' | 'withdrawn' | 'withdrawal_rejected'
      }));
    } catch (error) {
      console.error('Failed to fetch user inventory:', error);
      return [];
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
  static async addItemToInventory(
    telegramId: number,
    item: InventoryItem
  ): Promise<string | null> {
    try {
      console.log('üîç InventoryService.addItemToInventory –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', {
        telegramId,
        item: {
          name: item.name,
          price: item.price,
          rarity: item.rarity,
          type: item.type,
          caseId: item.caseId,
          case_name: item.case_name,
          image: item.image,
          image_url: item.image_url
        }
      });

      // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–•
      console.log('üîç –ü–†–û–í–ï–†–ö–ê –í–•–û–î–ù–´–• –î–ê–ù–ù–´–•:');
      console.log('- Telegram ID:', telegramId, typeof telegramId);
      console.log('- –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:', item.name, typeof item.name, '–î–ª–∏–Ω–∞:', item.name?.length);
      console.log('- –¶–µ–Ω–∞:', item.price, typeof item.price);
      console.log('- –†–µ–¥–∫–æ—Å—Ç—å:', item.rarity, typeof item.rarity);
      console.log('- Case ID:', item.caseId, typeof item.caseId, '–î–ª–∏–Ω–∞:', item.caseId?.length);
      console.log('- Case Name:', item.case_name, typeof item.case_name);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –ø—Ä–æ–¥–∞–Ω
      if (item.status === 'sold') {
        console.log('üö´ –ü—Ä–µ–¥–º–µ—Ç —É–∂–µ –±—ã–ª –ø—Ä–æ–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î');
        return null;
      }

      const insertData = {
        telegram_id: telegramId,
        item_name: item.name,
        item_price: item.price,
        item_rarity: item.rarity,
        item_type: item.type,
        case_id: item.caseId,
        case_name: item.case_name,
        item_image: item.image,
        item_image_url: item.image_url,
        status: 'new',
        withdrawal_status: 'available', // –ù–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã
        obtained_at: new Date().toISOString()
      };

      console.log('üì§ –§–ò–ù–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –ë–î:', insertData);

      const { data, error } = await supabase
        .from('user_inventory')
        .insert(insertData)
        .select('id')
        .single();

      if (error) {
        console.error('‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –î–û–ë–ê–í–õ–ï–ù–ò–ò –í –ë–î:', error);
        console.error('‚ùå –ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
        console.error('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
        console.error('‚ùå –î–µ—Ç–∞–ª–∏:', error.details);
        console.error('‚ùå –ü–æ–¥—Å–∫–∞–∑–∫–∞:', error.hint);
        throw error;
      }

      console.log('‚úÖ –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù –í –ë–î —Å ID:', data?.id);
      console.log('‚úÖ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
      return data?.id || null;
    } catch (error) {
      console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ addItemToInventory:', error);
      console.error('‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏:', typeof error);
      console.error('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error instanceof Error ? error.stack : '–ù–µ—Ç —Å—Ç–µ–∫–∞');
      return null;
    }
  }

  // –ü—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
  static async sellItem(
    itemId: string,
    telegramId: number
  ): Promise<number> {
    try {
      console.log('üîÑ –ü—Ä–æ–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç:', { itemId, telegramId });
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–∞
      const { data: itemData, error: fetchError } = await supabase
        .from('user_inventory')
        .select('*')
        .eq('id', itemId)
        .eq('telegram_id', telegramId)
        .eq('status', 'new')
        .single();

      if (fetchError || !itemData) {
        console.error('‚ùå Error fetching item for sale:', fetchError);
        console.error('üîç Item data:', itemData);
        return 0;
      }

      console.log('‚úÖ –ü—Ä–µ–¥–º–µ—Ç –Ω–∞–π–¥–µ–Ω:', itemData);
      const itemPrice = itemData.item_price;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ 'sold'
      const { error: updateError } = await supabase
        .from('user_inventory')
        .update({ 
          status: 'sold', 
          sold_at: new Date().toISOString() 
        })
        .eq('id', itemId)
        .eq('telegram_id', telegramId);

      if (updateError) {
        console.error('‚ùå Error updating item status:', updateError);
        throw updateError;
      }

      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–º–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "sold"');

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        const { error: statsError } = await supabase.rpc('increment_user_items_sold', {
          user_telegram_id: telegramId
        });

        if (statsError) {
          console.error('‚ùå Error updating items sold statistics:', statsError);
        } else {
          console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        }
      } catch (error) {
        console.error('‚ùå Failed to update items sold statistics:', error);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { error: balanceError } = await supabase.rpc('update_user_balance', {
        user_id: telegramId,
        amount: itemPrice,
        description: '–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è'
      });

      if (balanceError) {
        console.error('‚ùå Error updating balance:', balanceError);
        // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –ø—Ä–æ–¥–∞–Ω
      } else {
        console.log('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
      }

      console.log('üéâ –ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω –∑–∞:', itemPrice);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      await refreshAchievements();
      
      return itemPrice;
    } catch (error) {
      console.error('‚ùå Failed to sell item:', error);
      return 0;
    }
  }

  // –í—ã–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç
  static async withdrawItem(
    itemId: string,
    telegramId: number
  ): Promise<boolean> {
    try {
      console.log('üîÑ –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥–º–µ—Ç:', { itemId, telegramId });
      
      const { error } = await supabase
        .from('user_inventory')
        .update({ 
          status: 'withdrawn', 
          withdrawn_at: new Date().toISOString() 
        })
        .eq('id', itemId)
        .eq('telegram_id', telegramId)
        .eq('status', 'new');

      if (error) {
        console.error('‚ùå Error withdrawing item:', error);
        throw error;
      }

      console.log('‚úÖ –ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω');
      return true;
    } catch (error) {
      console.error('‚ùå Failed to withdraw item:', error);
      return false;
    }
  }

  // –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π localStorage –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  static async migrateLocalStorageToDatabase(telegramId: number): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
      const localInventory = localStorage.getItem('vaultory_inventory');
      if (!localInventory) return;

      const items: InventoryItem[] = JSON.parse(localInventory);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
      const activeItems = items.filter(item => 
        item.status && item.status !== 'sold' && item.status !== 'withdrawn'
      );

      if (activeItems.length === 0) return;

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      for (const item of activeItems) {
        await this.addItemToInventory(telegramId, item);
      }
      
      console.log(`Migrated ${activeItems.length} items from localStorage to database`);
      
      // –û—á–∏—â–∞–µ–º localStorage –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
      localStorage.removeItem('vaultory_inventory');
    } catch (error) {
      console.error('Failed to migrate localStorage to database:', error);
    }
  }
}
