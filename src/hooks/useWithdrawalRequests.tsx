import { useState, useEffect } from 'react';
import { supabase } from '../integrations/supabase/client';
import { useNotification } from './useNotification';

export interface WithdrawalRequest {
  id: string;
  user_id: number;
  item_id: string;
  item_name: string;
  telegram_username: string;
  status: 'pending' | 'processing' | 'completed' | 'rejected';
  created_at: string;
  updated_at: string;
  processed_at: string | null;
  admin_notes: string | null;
}

export const useWithdrawalRequests = () => {
  const [requests, setRequests] = useState<WithdrawalRequest[]>([]);
  const [loading, setLoading] = useState(false);
  const { showSuccess, showError } = useNotification();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const checkTable = async () => {
      try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã withdrawal_requests...');
        const { data, error } = await supabase
          .from('withdrawal_requests')
          .select('count(*)', { count: 'exact', head: true });
        
        if (error) {
          console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ withdrawal_requests –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', error);
          showError('–¢–∞–±–ª–∏—Ü–∞ withdrawal_requests –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç.');
        } else {
          console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ withdrawal_requests —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã:', err);
      }
    };
    
    checkTable();
  }, []);

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const fetchUserRequests = async (userId: number) => {
    try {
      setLoading(true);
      console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
      
      const { data, error } = await supabase
        .from('withdrawal_requests')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå Error fetching requests:', error);
        throw error;
      }
      
      console.log('‚úÖ –ó–∞–ø—Ä–æ—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
      setRequests(data || []);
    } catch (error) {
      console.error('Error fetching withdrawal requests:', error);
      showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥');
    } finally {
      setLoading(false);
    }
  };

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  const fetchAllRequests = async () => {
    try {
      setLoading(true);
      console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã (–∞–¥–º–∏–Ω)...');
      
      const { data, error } = await supabase
        .from('withdrawal_requests')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå Error fetching all requests:', error);
        throw error;
      }
      
      console.log('‚úÖ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
      setRequests(data || []);
    } catch (error) {
      console.error('Error fetching all withdrawal requests:', error);
      showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥');
    } finally {
      setLoading(false);
    }
  };

  // –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  const createWithdrawalRequest = async (
    userId: number,
    itemId: string,
    itemName: string,
    telegramUsername: string
  ): Promise<boolean> => {
    try {
      setLoading(true);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç username (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @)
      const formattedUsername = telegramUsername.startsWith('@') 
        ? telegramUsername 
        : `@${telegramUsername}`;

      console.log('Creating withdrawal request:', {
        userId,
        itemId,
        itemName,
        telegramUsername: formattedUsername
      });

      // –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
      
      // –ü—Ä—è–º–∞—è –≤—Å—Ç–∞–≤–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É
      console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏:', {
        user_id: userId,
        item_id: itemId,
        item_name: itemName,
        telegram_username: formattedUsername,
        status: 'pending'
      });

      const { data, error } = await supabase
        .from('withdrawal_requests')
        .insert({
          user_id: userId,
          item_id: itemId,
          item_name: itemName,
          telegram_username: formattedUsername,
          status: 'pending'
        })
        .select()
        .single();

      if (error) {
        console.error('‚ùå Insert Error:', error);
        console.error('‚ùå Error details:', {
          code: error.code,
          message: error.message,
          details: error.details,
          hint: error.hint
        });
        throw error;
      }

      console.log('‚úÖ Insert Response:', data);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–∞ 'withdrawal_requested'
      try {
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ...');
        const { error: updateError } = await supabase
          .from('user_inventory')
          .update({ withdrawal_status: 'withdrawal_requested' })
          .eq('id', itemId);

        if (updateError) {
          console.warn('‚ö†Ô∏è Could not update inventory status:', updateError);
        } else {
          console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ withdrawal_requested');
        }
      } catch (updateError) {
        console.warn('‚ö†Ô∏è Error updating inventory status:', updateError);
      }

      showSuccess('–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
      return true;

    } catch (error: any) {
      console.error('Error creating withdrawal request:', error);
      showError(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥');
      return false;
    } finally {
      setLoading(false);
    }
  };

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  const updateRequestStatus = async (
    requestId: string,
    status: WithdrawalRequest['status'],
    adminNotes?: string
  ): Promise<boolean> => {
    try {
      setLoading(true);

      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
      const { data: requestData, error: fetchError } = await supabase
        .from('withdrawal_requests')
        .select('item_id')
        .eq('id', requestId)
        .single();

      if (fetchError || !requestData) {
        throw new Error('–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const updateData: any = {
        status,
        updated_at: new Date().toISOString()
      };

      if (adminNotes) {
        updateData.admin_notes = adminNotes;
      }

      if (status === 'completed' || status === 'rejected') {
        updateData.processed_at = new Date().toISOString();
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
      const { error } = await supabase
        .from('withdrawal_requests')
        .update(updateData)
        .eq('id', requestId);

      if (error) throw error;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
      try {
        let inventoryStatus: string;
        
        if (status === 'rejected') {
          // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
          inventoryStatus = 'available';
          console.log('üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (–∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω)');
        } else if (status === 'completed') {
          // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω - –ø—Ä–µ–¥–º–µ—Ç –≤—ã–≤–µ–¥–µ–Ω
          inventoryStatus = 'withdrawn';
          console.log('üîÑ –ü—Ä–µ–¥–º–µ—Ç –≤—ã–≤–µ–¥–µ–Ω –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω)');
        } else {
          // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
          console.log('üîÑ –°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è');
          showSuccess('–°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
          return true;
        }

        const { error: inventoryError } = await supabase
          .from('user_inventory')
          .update({ withdrawal_status: inventoryStatus })
          .eq('id', requestData.item_id);

        if (inventoryError) {
          console.warn('‚ö†Ô∏è Could not update inventory status:', inventoryError);
        } else {
          console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–º–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: ${inventoryStatus}`);
        }
      } catch (inventoryError) {
        console.warn('‚ö†Ô∏è Error updating inventory status:', inventoryError);
      }

      showSuccess('–°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
      return true;

    } catch (error: any) {
      console.error('Error updating request status:', error);
      showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞');
      return false;
    } finally {
      setLoading(false);
    }
  };

  return {
    requests,
    loading,
    fetchUserRequests,
    fetchAllRequests,
    createWithdrawalRequest,
    updateRequestStatus
  };
};
