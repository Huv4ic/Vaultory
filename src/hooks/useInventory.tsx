import React, { createContext, useContext, useState, useEffect } from 'react';
import { InventoryService, DatabaseInventoryItem } from '../services/inventoryService';
import { useAuth } from './useAuth';
import { supabase } from '@/integrations/supabase/client';

export interface InventoryItem {
  id?: string;
  name: string;
  price: number;
  rarity: string;
  type?: string;
  caseId?: string;
  case_name?: string;
  image?: string;
  image_url?: string;
  status?: 'new' | 'sold' | 'withdrawn';
  obtained_at?: string;
}

interface InventoryContextType {
  items: InventoryItem[];
  addItem: (item: InventoryItem) => Promise<void>;
  removeItem: (index: number) => Promise<void>;
  sellItem: (index: number) => Promise<number>;
  withdrawItem: (index: number) => Promise<void>;
  clear: () => Promise<void>;
  refreshItems: () => Promise<void>;
  getTotalValue: () => Promise<number>;
  getCasesOpened: () => Promise<number>;
  casesOpened: number;
  spent: number;
  purchased: number;
  syncInventory: () => Promise<void>;
  loading: boolean;
}

const InventoryContext = createContext<InventoryContextType | undefined>(undefined);

export const InventoryProvider = ({ children }: { children: React.ReactNode }) => {
  const { profile } = useAuth();
  const [items, setItems] = useState<InventoryItem[]>([]);
  const [casesOpened, setCasesOpened] = useState(0);
  const [spent, setSpent] = useState(0);
  const [purchased, setPurchased] = useState(0);
  const [loading, setLoading] = useState(false);
  
  // –û—á–µ—Ä–µ–¥—å –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω (–≤—Ä–µ–º–µ–Ω–Ω–æ)
  const [pendingItems, setPendingItems] = useState<InventoryItem[]>([]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const loadInventoryFromDatabase = async (telegramId: number) => {
    try {
      setLoading(true);
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è telegram_id:', telegramId);
      
      const dbItems = await InventoryService.getUserInventory(telegramId);
      console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –ë–î:', dbItems.length);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º DatabaseInventoryItem –≤ InventoryItem
      const convertedItems: InventoryItem[] = dbItems.map(dbItem => ({
        id: dbItem.id,
        name: dbItem.item_name,
        price: dbItem.item_price,
        rarity: dbItem.item_rarity,
        type: dbItem.item_type,
        caseId: dbItem.case_id,
        case_name: dbItem.case_name,
        image: dbItem.item_image,
        image_url: dbItem.item_image_url,
        status: dbItem.status,
        obtained_at: dbItem.obtained_at,
        withdrawal_status: dbItem.withdrawal_status
      }));

      // –ü—Ä–æ—Å—Ç–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ ID
      const uniqueItems = convertedItems.filter((item, index, self) => 
        index === self.findIndex(t => t.id === item.id)
      );

      setItems(uniqueItems);
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ', uniqueItems.length, '–ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    } catch (error) {
      console.error('‚ùå Failed to load inventory from database:', error);
    } finally {
      setLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ localStorage –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  const migrateLocalStorage = async (telegramId: number) => {
    try {
      await InventoryService.migrateLocalStorageToDatabase(telegramId);
      // –ü–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
      await loadInventoryFromDatabase(telegramId);
    } catch (error) {
      console.error('Failed to migrate localStorage:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const checkDatabaseConnection = async () => {
    try {
      const telegramId = profile?.telegram_id;
      if (!telegramId) return false;
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–∑ –±–∞–∑—ã
      const dbItems = await InventoryService.getUserInventory(telegramId);
      console.log('Database connection successful, items count:', dbItems.length);
      return true;
    } catch (error) {
      console.error('Database connection failed:', error);
      return false;
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    console.log('Profile changed:', profile);
    const telegramId = profile?.telegram_id;
    if (telegramId) {
      console.log('Telegram ID found:', telegramId);
      
      // localStorage –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      console.log('Loading from database...');
      loadInventoryFromDatabase(telegramId);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
      if (profile.cases_opened !== undefined) {
        setCasesOpened(profile.cases_opened);
      }
      if (profile.total_spent !== undefined) {
        setSpent(profile.total_spent);
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å (–≤—Ä–µ–º–µ–Ω–Ω–æ)
      if (pendingItems.length > 0) {
        console.log('Processing pending items:', pendingItems);
        pendingItems.forEach(async (pendingItem) => {
          await addItem(pendingItem);
        });
        setPendingItems([]); // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
      }
    } else {
      console.log('No telegram ID yet, profile:', profile);
    }
  }, [profile]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è
  useEffect(() => {
    if (profile?.telegram_id) {
      checkDatabaseConnection();
    }
  }, [profile]);

  // Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
  useEffect(() => {
    if (!profile?.telegram_id) return;

    console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º real-time –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è telegram_id:', profile.telegram_id);

    const subscription = supabase
      .channel('inventory_changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'user_inventory',
          filter: `telegram_id=eq.${profile.telegram_id}`
        },
        (payload) => {
          console.log('üîÑ REAL-TIME: –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –æ–±–Ω–æ–≤–ª–µ–Ω:', payload);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          loadInventoryFromDatabase(profile.telegram_id);
        }
      )
      .subscribe((status) => {
        console.log('üîÑ Real-time inventory subscription status:', status);
      });

    return () => {
      console.log('üîÑ –û—Ç–∫–ª—é—á–∞–µ–º real-time –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å');
      subscription.unsubscribe();
    };
  }, [profile?.telegram_id]);

  // –î–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, localStorage –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

  const addItem = async (item: InventoryItem & { spent?: number; purchased?: boolean }) => {
    try {
      console.log('addItem called with:', item);
      console.log('Current profile:', profile);
      
      // –ü–æ–ª—É—á–∞–µ–º telegram_id –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const telegramId = profile?.telegram_id;
      if (!telegramId) {
        console.error('Telegram ID not found in profile, profile:', profile);
              // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
      if (!profile) {
        console.log('Profile not loaded yet, waiting...');
        return;
      }
        return;
      }

      console.log('Adding item to database with telegramId:', telegramId);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∫–µ–π—Å—É
      const existingItem = items.find(existingItem => 
        existingItem.name === item.name && 
        existingItem.caseId === item.caseId
      );
      
      if (existingItem) {
        console.log('üö´ –ü—Ä–µ–¥–º–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ:', existingItem);
        return;
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –±—ã–ª –ø—Ä–æ–¥–∞–Ω, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
      if (item.status === 'sold') {
        console.log('üö´ –ü—Ä–µ–¥–º–µ—Ç —É–∂–µ –±—ã–ª –ø—Ä–æ–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ:', item);
        return;
      }

      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const newItemId = await InventoryService.addItemToInventory(telegramId, item);
        
        if (newItemId) {
          console.log('Item added successfully to database with ID:', newItemId);
          
          // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID
          const duplicateCheck = items.find(existingItem => existingItem.id === newItemId);
          if (duplicateCheck) {
            console.log('üö´ –ü—Ä–µ–¥–º–µ—Ç —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
            return;
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
          const newItem = { ...item, id: newItemId, status: 'new' as const };
          setItems(prev => [...prev, newItem]);
          
          console.log('‚úÖ –ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:', newItem.name);
        } else {
          console.error('Failed to get new item ID from database');
          throw new Error('Database operation failed');
        }
      } catch (dbError) {
        console.error('Database error - item not added:', dbError);
        throw dbError;
      }
    } catch (error) {
      console.error('Failed to add item:', error);
    }
  };

  const removeItem = async (index: number) => {
    // –ü—Ä–æ—Å—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setItems(prev => prev.filter((_, i) => i !== index));
  };

  const sellItem = async (index: number) => {
    try {
      console.log('üîÑ sellItem –≤—ã–∑–≤–∞–Ω —Å –∏–Ω–¥–µ–∫—Å–æ–º:', index);
      const item = items[index];
      console.log('üì¶ –ü—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:', item);
      
      if (!item || item.status === 'sold' || !item.id) {
        console.error('‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø—Ä–æ–¥–∞–Ω:', { item, index });
        return 0;
      }

      const telegramId = profile?.telegram_id;
      if (!telegramId) {
        console.error('‚ùå Telegram ID not found in profile');
        return 0;
      }

      console.log('üîß –í—ã–∑—ã–≤–∞–µ–º InventoryService.sellItem:', { itemId: item.id, telegramId });

      // –ü—Ä–æ–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const sellPrice = await InventoryService.sellItem(item.id, telegramId);
      
      if (sellPrice >= 0) { // –ò–∑–º–µ–Ω—è–µ–º > 0 –Ω–∞ >= 0
        console.log('‚úÖ –ü—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–¥–∞–Ω –∑–∞:', sellPrice);
        console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        setItems(prev => {
          const newItems = prev.filter((_, i) => i !== index);
          console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', { 
            oldCount: prev.length, 
            newCount: newItems.length,
            removedItem: item.name 
          });
          return newItems;
        });
        
        console.log('‚úÖ –ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await refreshItems();
        
        return sellPrice;
      } else {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç, —Ü–µ–Ω–∞:', sellPrice);
        return 0;
      }
    } catch (error) {
      console.error('‚ùå Failed to sell item:', error);
      return 0;
    }
  };

  const withdrawItem = async (index: number) => {
    try {
      console.log('üîÑ withdrawItem –≤—ã–∑–≤–∞–Ω —Å –∏–Ω–¥–µ–∫—Å–æ–º:', index);
      const item = items[index];
      console.log('üì¶ –ü—Ä–µ–¥–º–µ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞:', item);
      
      if (!item || !item.id) {
        console.error('‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', { item, index });
        return;
      }

      const telegramId = profile?.telegram_id;
      if (!telegramId) {
        console.error('‚ùå Telegram ID not found in profile');
        return;
      }

      console.log('üîß –í—ã–∑—ã–≤–∞–µ–º InventoryService.withdrawItem:', { itemId: item.id, telegramId });

      // –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥–º–µ—Ç —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const success = await InventoryService.withdrawItem(item.id, telegramId);
      
      if (success) {
        console.log('‚úÖ –ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω');
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        setItems(prev => prev.filter((_, i) => i !== index));
      } else {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç');
      }
    } catch (error) {
      console.error('‚ùå Failed to withdraw item:', error);
    }
  };

  const refreshItems = async () => {
    const telegramId = profile?.telegram_id;
    if (telegramId) {
      await loadInventoryFromDatabase(telegramId);
    }
  };

  const syncInventory = async () => {
    const telegramId = profile?.telegram_id;
    if (telegramId) {
      // –°–Ω–∞—á–∞–ª–∞ –º–∏–≥—Ä–∏—Ä—É–µ–º localStorage –µ—Å–ª–∏ –µ—Å—Ç—å
      await migrateLocalStorage(telegramId);
      // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã
      await loadInventoryFromDatabase(telegramId);
    }
  };

  const getTotalValue = async () => {
    return items.filter(item => item.status !== 'sold').reduce((sum, item) => sum + item.price, 0);
  };

  const getCasesOpened = async () => casesOpened;

  const clear = async () => {
    setItems([]);
    setCasesOpened(0);
    setSpent(0);
    setPurchased(0);
    
    // –î–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('Inventory cleared (database-only mode)');
  };

  // localStorage –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

  return (
    <InventoryContext.Provider value={{ 
      items, 
      addItem, 
      removeItem, 
      sellItem, 
      withdrawItem, 
      clear, 
      refreshItems, 
      getTotalValue, 
      getCasesOpened, 
      casesOpened, 
      spent, 
      purchased,
      syncInventory,
      loading
    }}>
      {children}
    </InventoryContext.Provider>
  );
};

export const useInventory = () => {
  const ctx = useContext(InventoryContext);
  if (!ctx) throw new Error('useInventory must be used within InventoryProvider');
  return ctx;
}; 