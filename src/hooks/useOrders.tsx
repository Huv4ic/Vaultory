import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from './useAuth';
import { refreshAchievements } from '../utils/achievementUtils';

export interface OrderItem {
  id: string;
  name: string;
  price: number;
  quantity: number;
  image?: string;
  image_url?: string;
}

export interface Order {
  id: string;
  user_id: number;
  total_amount: number;
  status: 'pending' | 'processing' | 'completed' | 'cancelled';
  items: OrderItem[];
  created_at: string;
  updated_at: string;
}

export const useOrders = () => {
  const { telegramUser } = useAuth();
  const [isProcessing, setIsProcessing] = useState(false);

  // –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  const createOrder = async (items: OrderItem[], totalAmount: number): Promise<{ success: boolean; orderId?: string; error?: string }> => {
    if (!telegramUser?.id) {
      return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' };
    }

    setIsProcessing(true);

    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞–∫–∞–∑–∞
      const orderId = crypto.randomUUID();

      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞
      const { error: balanceError } = await supabase.rpc('update_user_balance', {
        user_id: telegramUser.id,
        amount: -totalAmount,
        description: '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞'
      });

      if (balanceError) {
        console.error('–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:', balanceError);
        return { success: false, error: '–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤' };
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –±–æ—Ç–∞
      await sendOrderNotification(items, totalAmount, orderId);

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      await refreshAchievements();

      return { success: true, orderId };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
      return { success: false, error: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞' };
    } finally {
      setIsProcessing(false);
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–æ—Ç–∞
  const sendOrderNotification = async (items: OrderItem[], totalAmount: number, orderId: string) => {
    try {
      const botToken = '8017714761:AAH9xTX_9fNUPGKuLaxqJWf85W7AixO2rEU';
      const chatId = '5931400368';

      const itemsList = items.map(item => 
        `‚Ä¢ ${item.name} x${item.quantity} - $${item.price * item.quantity}`
      ).join('\n');

      const message = `üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${telegramUser?.username || '–ë–µ–∑ username'}\n` +
        `üÜî Telegram ID: ${telegramUser?.id}\n` +
        `üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderId}\n` +
        `üí∞ –°—É–º–º–∞: $${totalAmount}\n\n` +
        `üìã –¢–æ–≤–∞—Ä—ã:\n${itemsList}\n\n` +
        `‚ö†Ô∏è –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–æ–≤!`;

      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message
        })
      });

      if (!response.ok) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ:', response.statusText);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ:', error);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getUserOrders = async (): Promise<Order[]> => {
    if (!telegramUser?.id) return [];

    try {
      const { data, error } = await supabase
        .from('orders')
        .select('*')
        .eq('user_id', telegramUser.id)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
        return [];
      }

      return data || [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
      return [];
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getUserStatistics = async () => {
    if (!telegramUser?.id) return null;

    try {
      const { data, error } = await supabase
        .from('user_statistics')
        .select('*')
        .eq('telegram_id', telegramUser.id)
        .single();

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        return null;
      }

      return data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return null;
    }
  };

  return {
    createOrder,
    getUserOrders,
    getUserStatistics,
    isProcessing
  };
};
