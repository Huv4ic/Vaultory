import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from './useAuth';

export interface OrderItem {
  id: string;
  name: string;
  price: number;
  quantity: number;
  image?: string;
  image_url?: string;
}

export interface Order {
  id: string;
  user_id: number;
  total_amount: number;
  status: 'pending' | 'processing' | 'completed' | 'cancelled';
  items: OrderItem[];
  created_at: string;
  updated_at: string;
}

export const useOrders = () => {
  const { telegramUser } = useAuth();
  const [isProcessing, setIsProcessing] = useState(false);

  // –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  const createOrder = async (items: OrderItem[], totalAmount: number): Promise<{ success: boolean; orderId?: string; error?: string }> => {
    console.log('üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –°–û–ó–î–ê–ù–ò–ï –ó–ê–ö–ê–ó–ê');
    console.log('üë§ TelegramUser:', telegramUser);
    console.log('üìã Items:', items);
    console.log('üí∞ TotalAmount:', totalAmount);
    
    if (!telegramUser?.id) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' };
    }

    setIsProcessing(true);

    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞–∫–∞–∑–∞
      const orderId = crypto.randomUUID();
      console.log('üÜî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω OrderId:', orderId);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –±–æ—Ç–∞
      console.log('üîî –í—ã–∑—ã–≤–∞–µ–º sendOrderNotification...');
      await sendOrderNotification(items, totalAmount, orderId);
      console.log('‚úÖ sendOrderNotification –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

      console.log('üéâ –ó–ê–ö–ê–ó –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù!');
      return { success: true, orderId };
    } catch (error) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–§–û–†–ú–õ–ï–ù–ò–ò –ó–ê–ö–ê–ó–ê:', error);
      return { success: false, error: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞' };
    } finally {
      setIsProcessing(false);
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–æ—Ç–∞
  const sendOrderNotification = async (items: OrderItem[], totalAmount: number, orderId: string) => {
    try {
      console.log('üîî –ù–ê–ß–ò–ù–ê–ï–ú –û–¢–ü–†–ê–í–ö–£ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í TELEGRAM');
      console.log('üì¶ OrderId:', orderId);
      console.log('üí∞ TotalAmount:', totalAmount);
      console.log('üìã Items:', items);
      console.log('üë§ TelegramUser:', telegramUser);
      
      const botToken = '8017714761:AAH9xTX_9fNUPGKuLaxqJWf85W7AixO2rEU';
      const chatId = '5931400368'; // –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–∞–∫–∂–µ: '@vaultorysell' –∏–ª–∏ '-1001234567890'
      
      console.log('ü§ñ Bot Token:', botToken);
      console.log('üí¨ Chat ID:', chatId);

      const itemsList = items.map(item => 
        `‚Ä¢ ${item.name} x${item.quantity} - ${item.price * item.quantity}‚Ç¥`
      ).join('\n');

      const message = `üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${telegramUser?.username || '–ë–µ–∑ username'}\n` +
        `üÜî Telegram ID: ${telegramUser?.id}\n` +
        `üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: \`${orderId}\`\n` +
        `üí∞ –°—É–º–º–∞: ${totalAmount}‚Ç¥\n\n` +
        `üìã –¢–æ–≤–∞—Ä—ã:\n${itemsList}\n\n` +
        `‚ö†Ô∏è *–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–æ–≤!*`;

      console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', message);
      console.log('üîó URL:', `https://api.telegram.org/bot${botToken}/sendMessage`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      try {
        const testResponse = await fetch(`https://api.telegram.org/bot${botToken}/getMe`);
        const testData = await testResponse.json();
        console.log('ü§ñ –¢–µ—Å—Ç –±–æ—Ç–∞:', testData);
      } catch (testError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:', testError);
      }

      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'Markdown'
        })
      });

      console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç Telegram API:', response.status, response.statusText);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø:', response.statusText, errorText);
      } else {
        const responseData = await response.json();
        console.log('üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Telegram API:', responseData);
        
        if (responseData.ok) {
          console.log('‚úÖ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–û –í TELEGRAM!');
          console.log('üì® Message ID:', responseData.result?.message_id);
          console.log('üí¨ Chat ID:', responseData.result?.chat?.id);
        } else {
          console.error('‚ùå TELEGRAM API –í–ï–†–ù–£–õ –û–®–ò–ë–ö–£:', responseData.description);
        }
      }
    } catch (error) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–¢–ü–†–ê–í–ö–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø:', error);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getUserOrders = async (): Promise<Order[]> => {
    if (!telegramUser?.id) return [];

    try {
      const { data, error } = await supabase
        .from('orders')
        .select('*')
        .eq('user_id', telegramUser.id)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
        return [];
      }

      return data || [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
      return [];
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getUserStatistics = async () => {
    if (!telegramUser?.id) return null;

    try {
      const { data, error } = await supabase
        .from('user_statistics')
        .select('*')
        .eq('telegram_id', telegramUser.id)
        .single();

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        return null;
      }

      return data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return null;
    }
  };

  return {
    createOrder,
    getUserOrders,
    getUserStatistics,
    isProcessing
  };
};
