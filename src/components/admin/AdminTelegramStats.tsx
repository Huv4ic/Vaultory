import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { RefreshCw, Users, Clock, CheckCircle, XCircle } from 'lucide-react';
import { TelegramStatsService } from '@/services/telegramStatsService';
import { TelegramBotAPI } from '@/api/telegramStats';
import { useNotification } from '@/hooks/useNotification';

export const AdminTelegramStats: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [stats, setStats] = useState<any>(null);
  const { showSuccess, showError } = useNotification();

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const loadStats = async () => {
    try {
      setLoading(true);
      const channelStats = await TelegramStatsService.getChannelStats('vaultorysell');
      setStats(channelStats);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
    } finally {
      setLoading(false);
    }
  };

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Telegram
  const updateStatsFromTelegram = async () => {
    try {
      setLoading(true);
      
      console.log('üîÑ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Telegram API...');
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Telegram
      const channelInfo = await TelegramBotAPI.getChannelInfo();
      
      if (!channelInfo) {
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Telegram. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.');
        return;
      }

      console.log('üìä –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', channelInfo.members_count, '–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤');

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const success = await TelegramStatsService.updateChannelStats(
        'vaultorysell', 
        channelInfo.members_count
      );

      if (success) {
        showSuccess(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${channelInfo.members_count}`);
        await loadStats(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      } else {
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      showError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞
  const formatNumber = (num: number): string => {
    return num.toLocaleString('ru-RU');
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatTime = (dateString: string): string => {
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Users className="w-5 h-5" />
            <span>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Telegram –∫–∞–Ω–∞–ª–∞</span>
          </CardTitle>
          <CardDescription>
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∫–∞–Ω–∞–ª–∞ @vaultorysell
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          <div className="flex flex-wrap gap-4">
            <Button 
              onClick={loadStats}
              disabled={loading}
              variant="outline"
              className="flex items-center space-x-2"
            >
              <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />
              <span>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</span>
            </Button>
            
            <Button 
              onClick={updateStatsFromTelegram}
              disabled={loading}
              className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700"
            >
              <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />
              <span>–û–±–Ω–æ–≤–∏—Ç—å –∏–∑ Telegram</span>
            </Button>

            <Button 
              onClick={async () => {
                try {
                  setLoading(true);
                  const channelInfo = await TelegramBotAPI.getChannelInfo();
                  if (channelInfo) {
                    showSuccess(`API —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${channelInfo.members_count}`);
                  } else {
                    showError('API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.');
                  }
                } catch (error) {
                  showError(`–û—à–∏–±–∫–∞ API: ${error.message}`);
                } finally {
                  setLoading(false);
                }
              }}
              disabled={loading}
              variant="secondary"
              className="flex items-center space-x-2"
            >
              <CheckCircle className="w-4 h-4" />
              <span>–¢–µ—Å—Ç API</span>
            </Button>
          </div>

          {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
          {stats && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-600">–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</p>
                      <p className="text-2xl font-bold text-blue-600">
                        {formatNumber(stats.subscribers_count)}
                      </p>
                    </div>
                    <Users className="w-8 h-8 text-blue-600" />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-600">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</p>
                      <p className="text-sm text-gray-500">
                        {formatTime(stats.last_updated)}
                      </p>
                    </div>
                    <Clock className="w-8 h-8 text-gray-600" />
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ */}
          <Card className="bg-blue-50 border-blue-200">
            <CardContent className="p-4">
              <h4 className="font-semibold text-blue-900 mb-2">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</h4>
              <div className="space-y-2 text-sm text-blue-800">
                <p>–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</p>
                <ul className="list-disc list-inside space-y-1 ml-4">
                  <li>–°–æ–∑–¥–∞–π—Ç–µ Telegram –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather</li>
                  <li>–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</li>
                  <li>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è REACT_APP_TELEGRAM_BOT_TOKEN</li>
                  <li>–°–æ–∑–¥–∞–π—Ç–µ cron job –∏–ª–∏ webhook –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</li>
                </ul>
              </div>
            </CardContent>
          </Card>
        </CardContent>
      </Card>
    </div>
  );
};

export default AdminTelegramStats;