import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Package, X, Gift, DollarSign } from 'lucide-react';
import { supabase } from '../integrations/supabase/client';

// CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const notificationStyles = `
  @keyframes slideInFromRight {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
  
  .animate-in.slide-in-from-right-2 {
    animation: slideInFromRight 0.3s ease-out;
  }
`;

interface CaseItem {
  id: string;
  name: string;
  rarity: string;
  image_url?: string;
  drop_after_cases?: number;
  price?: number; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ü–µ–Ω—ã
}

interface CaseRouletteProps {
  caseItems: CaseItem[];
  casePrice: number;
  caseName: string; // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–µ–π—Å–∞
  telegramId: number; // –î–æ–±–∞–≤–ª—è–µ–º telegram_id –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
  onClose: () => void;
  onCaseOpened: (item: CaseItem) => void;
}

const CaseRoulette: React.FC<CaseRouletteProps> = ({ 
  caseItems, 
  casePrice, 
  caseName, // –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é
  telegramId, // –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é
  onClose, 
  onCaseOpened 
}) => {
  const [isSpinning, setIsSpinning] = useState(false);
  const [winnerItem, setWinnerItem] = useState<CaseItem | null>(null);
  const [soldOrAdded, setSoldOrAdded] = useState(false);
  const [showResult, setShowResult] = useState(false);
  const stripRef = useRef<HTMLDivElement>(null);
  const [spinCount, setSpinCount] = useState(0);
  const animationRef = useRef<number | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const [notification, setNotification] = useState<{
    show: boolean;
    message: string;
    type: 'success' | 'info' | 'warning' | 'error';
  }>({
    show: false,
    message: '',
    type: 'success'
  });

  // –û—Ç–ª–∞–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
  useEffect(() => {
    console.log('State changed - isSpinning:', isSpinning, 'showResult:', showResult);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ showResult —Å—Ç–∞–ª false, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º winnerItem
    if (!showResult && winnerItem) {
      console.log('showResult became false, resetting winnerItem');
      setWinnerItem(null);
    }
  }, [isSpinning, showResult, winnerItem]);

  // –û—Ç–ª–∞–¥–∫–∞ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
  useEffect(() => {
    console.log('=== STATE CHANGE DEBUG ===');
    console.log('isSpinning:', isSpinning);
    console.log('showResult:', showResult);
    console.log('winnerItem:', winnerItem ? winnerItem.name : 'null');
    console.log('animationRef.current:', animationRef.current);
    console.log('========================');
  }, [isSpinning, showResult, winnerItem, animationRef.current]);

  // –û—Ç–ª–∞–¥–∫–∞ –≤—ã–∑–æ–≤–æ–≤ onClose
  useEffect(() => {
    console.log('=== COMPONENT MOUNTED ===');
    return () => {
      console.log('=== COMPONENT UNMOUNTING ===');
      console.log('Final state - isSpinning:', isSpinning, 'showResult:', showResult, 'winnerItem:', winnerItem);
    };
  }, []);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Å–µ –≤—ã–∑–æ–≤—ã onClose
  const handleClose = () => {
    console.log('=== ONCLOSE CALLED ===');
    console.log('Stack trace:', new Error().stack);
    console.log('Current state - isSpinning:', isSpinning, 'showResult:', showResult, 'winnerItem:', winnerItem);
    console.log('Component props:', { caseItems: caseItems.length, casePrice, onClose: typeof onClose, onCaseOpened: typeof onCaseOpened });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    setSoldOrAdded(false);
    
    onClose();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫—Ä–∞—Å–∏–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const showNotification = (message: string, type: 'success' | 'info' | 'warning' | 'error' = 'success') => {
    setNotification({
      show: true,
      message,
      type
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      setNotification(prev => ({ ...prev, show: false }));
    }, 3000);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
  const handleImmediateSell = async (item: CaseItem) => {
    try {
      console.log('üí∞ –ü—Ä–æ–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:', item);
      console.log('üíµ –¶–µ–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∞:', item.price);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: currentProfile, error: fetchBalanceError } = await supabase
        .from('profiles')
        .select('balance')
        .eq('telegram_id', telegramId)
        .single();

      if (fetchBalanceError || !currentProfile) {
        console.error('‚ùå Error fetching current balance:', fetchBalanceError);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞!');
        return;
      }

      const newBalance = (currentProfile.balance || 0) + item.price;
      console.log('üí∞ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å:', { old: currentProfile.balance, new: newBalance });

      const { error: balanceError } = await supabase
        .from('profiles')
        .update({ 
          balance: newBalance 
        })
        .eq('telegram_id', telegramId);

      if (balanceError) {
        console.error('‚ùå Error updating balance:', balanceError);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞!');
        return;
      }

      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
      showNotification(`–ü—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–¥–∞–Ω –∑–∞ ${item.price}‚Ç¥! –î–µ–Ω—å–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.`, 'success');
      
    } catch (error) {
      console.error('‚ùå Failed to sell item immediately:', error);
      showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –ø—Ä–µ–¥–º–µ—Ç–∞!', 'error');
    }
  };

  // Cleanup –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
  useEffect(() => {
    return () => {
      if (animationRef.current) {
        console.log('Cleanup: cancelling animation on unmount');
        cancelAnimationFrame(animationRef.current);
        animationRef.current = null;
      }
    };
  }, []);
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
  useEffect(() => {
    if (!isSpinning && animationRef.current) {
      console.log('Cleanup: cancelling animation when spinning stops');
      cancelAnimationFrame(animationRef.current);
      animationRef.current = null;
    }
  }, [isSpinning]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ drop_after_cases
  const calculateWinner = (): CaseItem => {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–µ–π—Å–æ–≤ (–ë–ï–ó +1)
    const currentCaseCount = parseInt(localStorage.getItem('totalCasesOpened') || '0');
    
    console.log('=== CALCULATE WINNER START ===');
    console.log('Current case count from localStorage:', currentCaseCount);
    console.log('All case items:', caseItems.map(item => ({ name: item.name, drop_after_cases: item.drop_after_cases })));
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ drop_after_cases
    const itemsByDropRate: { [key: number]: CaseItem[] } = {};
    
    caseItems.forEach(item => {
      const dropRate = item.drop_after_cases || 1;
      if (!itemsByDropRate[dropRate]) {
        itemsByDropRate[dropRate] = [];
      }
      itemsByDropRate[dropRate].push(item);
    });
    
    console.log('Items grouped by drop rate:', itemsByDropRate);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–µ–π—Å–∞
    let eligibleItems: CaseItem[] = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π drop_after_cases
    Object.keys(itemsByDropRate).forEach(dropRateStr => {
      const dropRate = parseInt(dropRateStr);
      const nextCaseNumber = currentCaseCount + 1;
      const isEligible = nextCaseNumber % dropRate === 0;
      
      console.log(`Checking drop rate ${dropRate}: next case ${nextCaseNumber} % ${dropRate} = ${nextCaseNumber % dropRate}, eligible: ${isEligible}`);
      
      if (isEligible) {
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∫–µ–π—Å –∫—Ä–∞—Ç–µ–Ω drop_after_cases, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å —ç—Ç–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        eligibleItems = eligibleItems.concat(itemsByDropRate[dropRate]);
        console.log(`Added items with drop rate ${dropRate}:`, itemsByDropRate[dropRate].map(item => item.name));
      }
    });
    
    console.log('Final eligible items:', eligibleItems.map(item => ({ name: item.name, drop_after_cases: item.drop_after_cases })));
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–∑ –≤—Å–µ—Ö
    if (eligibleItems.length === 0) {
      console.log('No eligible items found, using all case items');
      eligibleItems = caseItems;
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö
    const randomIndex = Math.floor(Math.random() * eligibleItems.length);
    const winner = eligibleItems[randomIndex];
    
    console.log('Selected winner:', { name: winner.name, rarity: winner.rarity, drop_after_cases: winner.drop_after_cases });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ (–ë–ï–ó –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
    setSpinCount(currentCaseCount + 1);
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('Winner calculation result:', {
      currentCaseCount,
      nextCaseCount: currentCaseCount + 1,
      itemsByDropRate,
      eligibleItems: eligibleItems.map(item => ({ name: item.name, drop_after_cases: item.drop_after_cases })),
      winner: winner.name,
      winnerDropRate: winner.drop_after_cases
    });
    
    console.log('=== CALCULATE WINNER END ===');
    
    return winner;
  };

  const startSpin = () => {
    console.log('=== START SPIN START ===');
    console.log('isSpinning state:', isSpinning);
    console.log('showResult state:', showResult);
    console.log('animationRef.current:', animationRef.current);
    
    // –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ê–ù–ò–ú–ê–¶–ò–ò –ü–ï–†–ï–î –ù–û–í–´–ú –ó–ê–ü–£–°–ö–û–ú
    if (animationRef.current) {
      console.log('Cancelling previous animation before new spin');
      cancelAnimationFrame(animationRef.current);
      animationRef.current = null;
    }
    
    // –°–ë–†–ê–°–´–í–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–Ø –ü–†–ò –ö–ê–ñ–î–û–ú –ù–û–í–û–ú –ó–ê–ü–£–°–ö–ï
    if (showResult) {
      console.log('Resetting states for new spin...');
      setShowResult(false);
      setWinnerItem(null);
      setSoldOrAdded(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –Ω–æ–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
    }
    
    if (isSpinning) {
      console.log('Already spinning, returning early');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
    if (caseItems.length === 0) {
      alert('–í —ç—Ç–æ–º –∫–µ–π—Å–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è');
      return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
    const winner = calculateWinner();
    setWinnerItem(winner);
    
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ winner –Ω–µ null
    if (!winner) {
      console.error('Winner is null! This should not happen.');
      alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è');
      return;
    }
    
    console.log('Starting spin with winner:', winner.name, 'rarity:', winner.rarity);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è –∫–∞–∫ –≤ HTML –¥–µ–º–æ
    if (stripRef.current) {
      const strip = stripRef.current;
      const viewport = strip.parentElement;
      
      console.log('Strip element found, starting animation...');
      
      // –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      const REPEAT = 50; // –¥–ª–∏–Ω–Ω–∞—è –ª–µ–Ω—Ç–∞ –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤
      let itemWidth = 0; // –≤—ã—á–∏—Å–ª–∏–º –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏
      
      // –í—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∫–∞—Ä—Ç–æ—á–∫–∏
      const first = strip.querySelector('.item');
      if (first) {
        const gap = 10; // gap –º–µ–∂–¥—É –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
        itemWidth = first.getBoundingClientRect().width + gap;
        console.log('Item width calculated:', itemWidth);
      }
      
      // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–∑–∏—Ü–∏–µ–π
      let x = 0; // —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –ª–µ–Ω—Ç—ã (translateX)
      let v = 0; // —Å–∫–æ—Ä–æ—Å—Ç—å (px/frame)
      
      const setX = (val: number) => { 
        x = val; 
        strip.style.transform = `translate3d(${val}px,0,0)`; 
      };
      
      const centerOffset = () => {
        const vpW = viewport!.clientWidth;
        return vpW/2 - itemWidth/2; // —á—Ç–æ–±—ã —Å–µ—Ä–µ–¥–∏–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–∏—à–ª–∞ –ø–æ–¥ –º–∞—Ä–∫–µ—Ä
      };
      
      const indexToX = (index: number) => {
        // –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ –¥–ª–∏–Ω–Ω–æ–π –ª–µ–Ω—Ç–µ
        return -(index*itemWidth) + centerOffset();
      };
      
      const nowIndex = () => {
        // –∫–∞–∫–æ–π –∏–Ω–¥–µ–∫—Å –ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ–¥ –º–∞—Ä–∫–µ—Ä–æ–º
        const idx = Math.round((centerOffset() - x) / itemWidth);
        return ((idx % (caseItems.length*REPEAT)) + (caseItems.length*REPEAT)) % (caseItems.length*REPEAT);
      };
      
      // –ê–Ω–∏–º–∞—Ü–∏—è
      const animate = () => {
        animationRef.current = requestAnimationFrame(animate);
        setX(x + v);
        // –Ω–µ–º–Ω–æ–≥–æ —Ç—Ä–µ–Ω–∏—è
        v *= 0.985;
        // –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Äî –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ª–µ–Ω—Ç–∞ (–∑–∞ —Ü–∏–∫–ª)
        const totalW = caseItems.length * REPEAT * itemWidth;
        if (x < -totalW + centerOffset()) setX(x + totalW);
        if (x > centerOffset()) setX(x - totalW);
      };
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ø–∏–Ω
      const spinToLocalIndex = (localIndex: number) => {
        console.log('spinToLocalIndex called with index:', localIndex);
        
        if (isSpinning) {
          console.log('Already spinning, cancelling previous animation');
          if (animationRef.current) {
            cancelAnimationFrame(animationRef.current);
          }
        }
        
        // —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Ä–∞–∑–≥–æ–Ω
        v = -40; // –≤–ª–µ–≤–æ
        console.log('Starting animation with velocity:', v);
        
        // –≤—ã–±–µ—Ä–µ–º —Å–µ–≥–º–µ–Ω—Ç, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–º—Å—è (–¥–∞–ª–µ–µ –ø–æ –ª–µ–Ω—Ç–µ + –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—Ä—É–≥–æ–≤)
        const currentGlobal = nowIndex();
        const loops = 3; // —Å–∫–æ–ª—å–∫–æ –∫—Ä—É–≥–æ–≤ –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        const stopGlobal = Math.floor(currentGlobal/caseItems.length)*caseItems.length + loops*caseItems.length + localIndex;
        const targetX = indexToX(stopGlobal);

        console.log('Animation target:', { currentGlobal, loops, stopGlobal, targetX });

        // –ü–ª–∞–≤–Ω—ã–π –¥–æ–≤–æ–¥ —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –∞–Ω–∏–º–∞—Ç–æ—Ä–∞
        const startX = x; 
        const dist = targetX - startX; 
        const D = 3200; // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º—Å
        const startT = performance.now();
        
        const easeOutCubic = (t: number) => { 
          return 1 - Math.pow(1 - t, 3); 
        };

        const tween = () => {
          const t = (performance.now() - startT) / D;
          console.log('Tween called, t:', t, 'target:', targetX, 'startT:', startT, 'D:', D);
          
          if (t >= 1){
            console.log('Tween animation completed, setting result');
            setX(targetX);
            
            // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            console.log('Setting isSpinning to false...');
            setIsSpinning(false);
            console.log('Setting showResult to true...');
            setShowResult(true);
            
            // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞
            const realLocal = stopGlobal % caseItems.length; 
            const it = caseItems[realLocal];
            console.log('Setting winnerItem to:', it.name);
            setWinnerItem(it);
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            if (animationRef.current) {
              console.log('Cancelling animation in tween completion');
              cancelAnimationFrame(animationRef.current);
              animationRef.current = null;
            }
            
            // –ê–Ω–∏–º–∞—Ü–∏—è —è—Ä–∫–æ—Å—Ç–∏ viewport
            if (viewport) {
              viewport.animate([
                {filter:'brightness(1.0)'},
                {filter:'brightness(1.6)'},
                {filter:'brightness(1.0)'}
              ], {duration:500});
            }
            
            console.log('States updated: isSpinning=false, showResult=true, winnerItem set');
            return;
          }
          setX(startX + dist * easeOutCubic(t));
          requestAnimationFrame(tween);
        };
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è, –ø–æ—Ç–æ–º –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ tween
        let frameCount = 0;
        const maxFrames = 60; // –ø—Ä–∏–º–µ—Ä–Ω–æ 1 —Å–µ–∫—É–Ω–¥–∞ –ø—Ä–∏ 60fps
        
        const mainAnimation = () => {
          frameCount++;
          console.log('Main animation frame:', frameCount, 'of', maxFrames);
          
          if (frameCount >= maxFrames) {
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–ª–∞–≤–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
            console.log('Switching to tween animation');
            console.log('Final position before tween - x:', x, 'v:', v);
            requestAnimationFrame(tween);
            return;
          }
          
          animationRef.current = requestAnimationFrame(mainAnimation);
          setX(x + v);
          v *= 0.985;
          
          // –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Äî –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ª–µ–Ω—Ç–∞ (–∑–∞ —Ü–∏–∫–ª)
          const totalW = caseItems.length * REPEAT * itemWidth;
          if (x < -totalW + centerOffset()) setX(x + totalW);
          if (x > centerOffset()) setX(x - totalW);
        };
        
        console.log('Starting main animation...');
        mainAnimation();
      };
      
      // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø–æ–±–µ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
      const winnerIndex = caseItems.findIndex(item => item.id === winner.id);
      
      // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å
      if (winnerIndex === -1) {
        console.error('Winner index not found! Winner:', winner, 'Case items:', caseItems);
        alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è');
        return;
      }
      
      console.log('Spinning to index:', winnerIndex, 'for winner:', winner.name);
      spinToLocalIndex(winnerIndex);
      
      setIsSpinning(true);
      console.log('=== START SPIN END ===');
    } else {
      console.error('Strip element not found!');
    }
  };

  const getRarityColor = (rarity: string) => {
    switch (rarity.toLowerCase()) {
      case 'common': return 'r-common';
      case 'rare': return 'r-rare';
      case 'epic': return 'r-epic';
      case 'legendary': return 'r-legend';
      default: return 'r-common';
    }
  };

  const getRarityName = (rarity: string) => {
    switch (rarity.toLowerCase()) {
      case 'common': return '–û–±—ã—á–Ω—ã–π';
      case 'rare': return '–†–µ–¥–∫–∏–π';
      case 'epic': return '–≠–ø–∏—á–µ—Å–∫–∏–π';
      case 'legendary': return '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π';
      default: return '–û–±—ã—á–Ω—ã–π';
    }
  };

  const getRarityTag = (rarity: string) => {
    switch (rarity.toLowerCase()) {
      case 'common': return 'common';
      case 'rare': return 'rare';
      case 'epic': return 'epic';
      case 'legendary': return 'legend';
      default: return 'common';
    }
  };

  return (
    <>
      <style>{`
        .r-common {
          background: #1f1f1f !important;
          color: #d3d3d3 !important;
          border: 1px solid #333 !important;
        }
        .r-rare {
          background: #2a1d0f !important;
          color: #f0d59f !important;
          border: 1px solid #7d520e !important;
        }
        .r-epic {
          background: #33210f !important;
          color: #ffe5a3 !important;
          border: 1px solid #aa7c2f !important;
        }
        .r-legend {
          background: #3d2a0e !important;
          color: #fff4c3 !important;
          border: 1px solid #d4af37 !important;
        }
        .w-35 {
          width: 120px !important;
        }
        @media (min-width: 640px) {
          .w-35 {
            width: 140px !important;
          }
        }
        .h-30 {
          height: 100px !important;
        }
        @media (min-width: 640px) {
          .h-30 {
            height: 120px !important;
          }
        }
        .gap-2\.5 {
          gap: 8px !important;
        }
        @media (min-width: 640px) {
          .gap-2\.5 {
            gap: 10px !important;
          }
        }
        .p-2\.5 {
          padding: 8px !important;
        }
        @media (min-width: 640px) {
          .p-2\.5 {
            padding: 10px !important;
          }
        }
        .mix-blend-mode-overlay {
          mix-blend-mode: overlay !important;
        }
        .filter-blur-sm {
          filter: blur(0.3px) !important;
        }
        .opacity-35 {
          opacity: 0.35 !important;
        }
        ${notificationStyles}
      `}</style>
      
      <div className="fixed inset-0 bg-black/90 backdrop-blur-xl z-50 flex items-center justify-center p-2 sm:p-4">
        <div className="bg-gray-900/95 rounded-2xl sm:rounded-3xl border-2 border-amber-500/50 shadow-2xl shadow-amber-500/30 max-w-4xl sm:max-w-6xl w-full max-h-[95vh] sm:max-h-[90vh] overflow-hidden">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="bg-gradient-to-r from-amber-500/20 to-yellow-500/20 p-4 sm:p-6 border-b border-amber-500/30">
            <div className="flex items-center justify-between">
              <h2 className="text-xl sm:text-2xl md:text-3xl font-bold text-white flex items-center">
                <Package className="w-6 h-6 sm:w-7 sm:h-7 md:w-8 md:h-8 mr-2 sm:mr-3 text-amber-400" />
                –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
              </h2>
              <Button
                onClick={() => {
                  console.log('Close button clicked!');
                  console.log('Current state - isSpinning:', isSpinning, 'showResult:', showResult);
                  handleClose();
                }}
                variant="ghost"
                size="sm"
                disabled={isSpinning}
                className={`${
                  isSpinning 
                    ? 'text-gray-600 cursor-not-allowed' 
                    : 'text-gray-400 hover:text-white hover:bg-white/10'
                }`}
              >
                <X className="w-5 h-5 sm:w-6 sm:h-6" />
              </Button>
            </div>
            <p className="text-gray-300 mt-2 text-sm sm:text-base">–°—Ç–æ–∏–º–æ—Å—Ç—å: {casePrice}‚Ç¥</p>
          </div>

          {/* –†—É–ª–µ—Ç–∫–∞ */}
          <div className="p-4 sm:p-6 md:p-8">
            {!showResult ? (
              <div className="space-y-6 sm:space-y-8">
                {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ */}
                <div className="text-center">
                  <Button
                    onClick={startSpin}
                    disabled={isSpinning}
                    className={`px-8 sm:px-10 md:px-12 py-4 sm:py-5 md:py-6 text-lg sm:text-xl md:text-2xl font-bold rounded-xl sm:rounded-2xl transition-all duration-300 ${
                      isSpinning
                        ? 'bg-gray-600 cursor-not-allowed'
                        : 'bg-gradient-to-r from-amber-500 to-yellow-500 hover:from-amber-600 hover:to-yellow-600 hover:scale-105 shadow-2xl shadow-amber-500/30'
                    }`}
                  >
                    {isSpinning ? (
                      <div className="flex items-center">
                        <div className="animate-spin rounded-full h-6 w-6 sm:h-7 sm:w-7 md:h-8 md:w-8 border-b-2 border-white mr-2 sm:mr-3"></div>
                        <span className="text-sm sm:text-base md:text-lg">–ö—Ä—É—Ç–∏—Ç—Å—è...</span>
                      </div>
                    ) : (
                      <>
                        <Package className="w-6 h-6 sm:w-7 sm:h-7 md:w-8 md:h-8 mr-2 sm:mr-3" />
                        –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É
                      </>
                    )}
                  </Button>
                </div>

                {/* –†—É–ª–µ—Ç–∫–∞ */}
                <div className="relative">
                  {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä—É–ª–µ—Ç–∫–∏ */}
                  <div className="relative h-32 sm:h-36 md:h-40 bg-gray-800/50 rounded-xl sm:rounded-2xl border border-amber-500/30 overflow-hidden">
                    {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π */}
                    <div className={`absolute left-1/2 top-0 bottom-0 w-0.5 sm:w-1 bg-gradient-to-b from-amber-400 to-yellow-400 transform -translate-x-1/2 z-10 shadow-lg shadow-amber-400/50 ${
                      isSpinning ? 'animate-pulse' : ''
                    }`}>
                      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Ü–µ–Ω—Ç—Ä–∞ */}
                      <div className="absolute -top-1 -left-1 w-2 h-2 sm:w-3 sm:h-3 bg-amber-400 rounded-full opacity-50 animate-ping"></div>
                      <div className="absolute -bottom-1 -left-1 w-2 h-2 sm:w-3 sm:h-3 bg-amber-400 rounded-full opacity-50 animate-ping" style={{ animationDelay: '0.5s' }}></div>
                    </div>
                    
                    {/* –õ–µ–Ω—Ç–∞ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ */}
                    <div 
                      ref={stripRef}
                      className="flex gap-2.5 items-center p-3 sm:p-4 h-full"
                      style={{ transform: 'translateX(300px)' }}
                    >
                      {/* –î—É–±–ª–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ */}
                      {Array.from({ length: 50 }, () => caseItems).flat().map((item, index) => (
                        <div
                          key={`${item.id}-${index}`}
                          className={`flex-shrink-0 w-35 h-30 rounded-lg sm:rounded-xl p-2.5 flex flex-col justify-end relative isolation isolate item ${
                            getRarityColor(item.rarity)
                          }`}
                        >
                          {/* –ë–ª–µ—Å–∫ */}
                          <div className="absolute inset-0 rounded-lg sm:rounded-xl bg-gradient-to-br from-white/15 to-transparent mix-blend-mode-overlay filter-blur-sm"></div>
                          {/* –°–≤–µ—á–µ–Ω–∏–µ */}
                          <div className="absolute inset-0 rounded-lg sm:rounded-xl shadow-lg opacity-35" style={{ boxShadow: '0 0 40px currentColor' }}></div>
                          
                          {/* –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ */}
                          <div className="font-bold text-xs sm:text-sm leading-tight relative z-10">
                            {item.name}
                          </div>
                          
                          {/* –¢–µ–≥ —Ä–µ–¥–∫–æ—Å—Ç–∏ */}
                          <div className="opacity-80 text-xs relative z-10">
                            {getRarityTag(item.rarity)}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                  
                  {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∏ —Å—á–µ—Ç—á–∏–∫ */}
                  <div className="text-center mt-3 sm:mt-4">
                    {isSpinning ? (
                      <div className="space-y-2">
                        <p className="text-amber-400 text-xs sm:text-sm font-medium">üé∞ –†—É–ª–µ—Ç–∫–∞ –∫—Ä—É—Ç–∏—Ç—Å—è...</p>
                        <div className="flex items-center justify-center space-x-2">
                          <div className="w-1.5 h-1.5 sm:w-2 sm:h-2 bg-amber-400 rounded-full animate-bounce"></div>
                          <div className="w-1.5 h-1.5 sm:w-2 sm:h-2 bg-amber-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                          <div className="w-1.5 h-1.5 sm:w-2 sm:h-2 bg-amber-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                        </div>
                      </div>
                    ) : (
                      <p className="text-gray-400 text-xs sm:text-sm">–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É</p>
                    )}
                  </div>
                </div>
              </div>
            ) : (
              /* –†–µ–∑—É–ª—å—Ç–∞—Ç */
              <div className="text-center space-y-4 sm:space-y-6">
                <div className="text-6xl sm:text-7xl md:text-8xl mb-4 sm:mb-6 animate-bounce">üéâ</div>
                
                <h3 className="text-2xl sm:text-3xl font-bold text-white mb-3 sm:mb-4">
                  –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!
                </h3>
                
                {winnerItem && (
                  <div className="bg-gradient-to-r from-amber-500/20 to-yellow-500/20 rounded-xl sm:rounded-2xl p-6 sm:p-8 border border-amber-500/30">
                    <div className={`w-24 h-24 sm:w-28 sm:h-28 md:w-32 md:h-32 mx-auto mb-3 sm:mb-4 rounded-lg sm:rounded-xl border-4 ${getRarityColor(winnerItem.rarity)} bg-gray-700/80 flex items-center justify-center`}>
                      {winnerItem.image_url ? (
                        <img
                          src={winnerItem.image_url}
                          alt={winnerItem.name}
                          className="w-20 h-20 sm:w-24 sm:h-24 md:w-24 md:h-24 object-cover rounded-lg"
                        />
                      ) : (
                        <Gift className="w-12 h-12 sm:w-14 sm:h-14 md:w-16 md:h-16 text-amber-400" />
                      )}
                    </div>
                    
                    <h4 className="text-xl sm:text-2xl font-bold text-white mb-2">
                      {winnerItem.name}
                    </h4>
                    
                    {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç–∞ */}
                    <div className="text-lg sm:text-xl font-bold text-green-400 mb-3">
                      –¶–µ–Ω–∞: {winnerItem.price || 0}‚Ç¥
                    </div>
                    
                    <div className={`inline-block px-3 sm:px-4 py-1.5 sm:py-2 rounded-full text-xs sm:text-sm font-bold ${
                      winnerItem.rarity.toLowerCase() === 'common' ? 'bg-gray-500 text-white' :
                      winnerItem.rarity.toLowerCase() === 'rare' ? 'bg-blue-500 text-white' :
                      winnerItem.rarity.toLowerCase() === 'epic' ? 'bg-purple-500 text-white' :
                      winnerItem.rarity.toLowerCase() === 'legendary' ? 'bg-yellow-500 text-black' :
                      'bg-gray-500 text-white'
                    }`}>
                      {getRarityName(winnerItem.rarity)}
                    </div>
                    
                    <p className="text-gray-300 mt-3 sm:mt-4 text-sm sm:text-base">
                      –ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!
                    </p>
                  </div>
                )}
                
                <div className="flex flex-col sm:flex-row justify-center gap-3 sm:gap-4 mb-4">
                  <Button
                    onClick={() => {
                      if (winnerItem && !soldOrAdded) {
                        console.log('üéÅ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"');
                        console.log('üíµ –¶–µ–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –∞–¥–º–∏–Ω–∫–∏:', winnerItem.price);
                        
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                        setSoldOrAdded(true);
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π –∏–∑ –∞–¥–º–∏–Ω–∫–∏
                        const inventoryItem = {
                          id: Date.now().toString(),
                          name: winnerItem.name,
                          price: winnerItem.price || 0, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∏–∑ –∞–¥–º–∏–Ω–∫–∏
                          rarity: winnerItem.rarity,
                          type: '–ö–µ–π—Å',
                          case_name: caseName, // –ò—Å–ø–æ–ª—å–∑—É–µ–º caseName –∏–∑ –ø—Ä–æ–ø—Å–æ–≤
                          image_url: winnerItem.image_url,
                          obtained_at: new Date().toISOString(),
                          status: 'new' as const
                        };
                        
                        console.log('‚úÖ –ü—Ä–µ–¥–º–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:', inventoryItem);
                        
                        // –í—ã–∑—ã–≤–∞–µ–º onCaseOpened –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
                        console.log('üîß –í—ã–∑—ã–≤–∞–µ–º onCaseOpened –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å');
                        onCaseOpened(winnerItem);
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        showNotification('–ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!', 'success');
                        
                        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                        setTimeout(() => {
                          handleClose();
                        }, 1500);
                      }
                    }}
                    disabled={soldOrAdded}
                    className={`px-6 sm:px-8 py-3 sm:py-4 font-bold rounded-lg sm:rounded-xl transition-all duration-300 text-sm sm:text-base ${
                      soldOrAdded 
                        ? 'bg-gray-500 text-gray-300 cursor-not-allowed opacity-50' 
                        : 'bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white hover:scale-105'
                    }`}
                  >
                    <Package className="w-4 h-4 mr-2" />
                    –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
                  </Button>
                  
                  <Button
                    onClick={() => {
                      if (winnerItem && !soldOrAdded) {
                        console.log('üí∞ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–∞—Ç—å"');
                        console.log('üíµ –¶–µ–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –∞–¥–º–∏–Ω–∫–∏:', winnerItem.price);
                        
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                        setSoldOrAdded(true);
                        
                        // –ü—Ä–æ–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –ø–æ –ø–æ–ª–Ω–æ–π —Ü–µ–Ω–µ –∏–∑ –∞–¥–º–∏–Ω–∫–∏ (–±–µ–∑ —Å–∫–∏–¥–æ–∫)
                        const sellPrice = winnerItem.price || 0;
                        console.log('üíµ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (–ø–æ–ª–Ω–∞—è):', sellPrice);
                        
                        // –í–ê–ñ–ù–û: –ù–ï –≤—ã–∑—ã–≤–∞–µ–º onCaseOpened –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ
                        // –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞–¥–∞—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, –µ—Å–ª–∏ –æ–Ω —Å—Ä–∞–∑—É –ø—Ä–æ–¥–∞–µ—Ç—Å—è
                        console.log('‚ùå onCaseOpened –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ');
                        
                        // –ü—Ä–æ–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å—Ä–∞–∑—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å
                        handleImmediateSell(winnerItem);
                        
                        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏
                        handleClose();
                      }
                    }}
                    disabled={soldOrAdded}
                    className={`px-6 sm:px-8 py-3 sm:px-8 py-3 sm:py-4 font-bold rounded-lg sm:rounded-xl transition-all duration-300 text-sm sm:text-base ${
                      soldOrAdded 
                        ? 'bg-gray-500 text-gray-500 cursor-not-allowed opacity-50' 
                        : 'bg-gradient-to-r from-red-500 to-orange-600 hover:from-red-600 hover:to-orange-700 text-white hover:scale-105'
                    }`}
                  >
                    <DollarSign className="w-4 h-4 mr-2" />
                    –ü—Ä–æ–¥–∞—Ç—å
                  </Button>
                </div>
                
                {/* –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–∫—Ä—ã—Ç—å" - –æ–∫–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è */}
              </div>
            )}
          </div>
        </div>
      </div>
      
      {/* –ö—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ */}
      {notification.show && (
        <div className="fixed top-4 right-4 z-[9999] animate-in slide-in-from-right-2 duration-300">
          <div className={`px-6 py-4 rounded-lg shadow-2xl border-l-4 ${
            notification.type === 'success' 
              ? 'bg-green-600 border-green-400 text-white' 
              : notification.type === 'error'
              ? 'bg-red-600 border-red-400 text-white'
              : notification.type === 'warning'
              ? 'bg-yellow-600 border-yellow-400 text-white'
              : 'bg-blue-600 border-blue-400 text-white'
          }`}>
            <div className="flex items-center gap-3">
              <div className="flex-shrink-0">
                {notification.type === 'success' && (
                  <div className="w-6 h-6 bg-green-400 rounded-full flex items-center justify-center">
                    <svg className="w-4 h-4 text-green-800" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                  </div>
                )}
                {notification.type === 'error' && (
                  <div className="w-6 h-6 bg-red-400 rounded-full flex items-center justify-center">
                    <svg className="w-4 h-4 text-red-800" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                    </svg>
                  </div>
                )}
                {notification.type === 'warning' && (
                  <div className="w-6 h-6 bg-yellow-400 rounded-full flex items-center justify-center">
                    <svg className="w-4 h-4 text-yellow-800" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                  </div>
                )}
                {notification.type === 'info' && (
                  <div className="w-6 h-6 bg-blue-400 rounded-full flex items-center justify-center">
                    <svg className="w-4 h-4 text-blue-800" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                    </svg>
                  </div>
                )}
              </div>
              <div className="flex-1">
                <p className="font-medium">{notification.message}</p>
                <p className="text-sm opacity-90">vaultory.pro</p>
              </div>
              <button
                onClick={() => setNotification(prev => ({ ...prev, show: false }))}
                className="flex-shrink-0 ml-2 text-white/70 hover:text-white transition-colors"
              >
                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π */}
      <style>{`
        @keyframes slideInFromRight {
          from {
            transform: translateX(100%);
            opacity: 0;
          }
          to {
            transform: translateX(0);
            opacity: 1;
          }
        }
        
        .animate-in.slide-in-from-right-2 {
          animation: slideInFromRight 0.3s ease-out;
        }
      `}</style>
    </>
  );
};

export default CaseRoulette;
